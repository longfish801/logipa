/*
 * release.gradle
 *
 * Copyright (C) jp.coocan.cute.longfish All Rights Reserved.
 */

plugins { 
	id 'jacoco'
	id 'edu.sc.seis.launch4j' version '3.0.5'
}

version = '0.2.00'

defaultTasks 'clean', 'release'

tasks.withType(AbstractCompile).each { it.options.encoding = 'UTF-8' }
tasks.withType(GroovyCompile).each { it.groovyOptions.encoding = 'UTF-8' }
tasks.withType(Javadoc).each { it.options.encoding = 'UTF-8' }

apply plugin: 'groovy'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'ch.qos.logback:logback-classic:1.2.11'
	implementation 'commons-io:commons-io:2.15.0'
	implementation 'org.slf4j:slf4j-api:1.7.36'
	implementation 'org.codehaus.groovy:groovy-all:3.0.9'
	testImplementation 'cglib:cglib-nodep:3.3.0'
	testImplementation 'org.objenesis:objenesis:3.3'
	testImplementation('org.spockframework:spock-core:2.1-groovy-3.0') {
		exclude group: 'org.codehaus.groovy'
	}
}

jacocoTestReport {
	reports { html.destination file("${buildDir}/jacocoHtml") }
}
jacocoTestReport.dependsOn 'test'

// ドキュメント生成関連のタスクです

groovydoc {
	overviewText(resources.text.fromFile('src/main/resources/overview.html'))
	link('http://docs.oracle.com/javase/8/docs/api/', 'java.', 'javax.')
	link('https://docs.oracle.com/javase/jp/8/docs/jre/api/net/httpserver/spec/', 'com.sun.')
	link('http://groovy.codehaus.org/api/', 'groovy.', 'org.codehaus.groovy.')
}

task deleteGroovydoc(type: Delete){
	delete 'docs/groovydoc'
}

task copyGroovydoc(type: Copy, dependsOn: [groovydoc, deleteGroovydoc]){
	from "${buildDir}/docs/groovydoc"
	into 'docs/groovydoc'
}

// srcフォルダ配下の編集後に実施すべきタスクです

task fix(dependsOn: [jacocoTestReport, copyGroovydoc]){ }

// 実行ファイル作成関連のタスクです

jar {
	manifest.attributes(
		'Main-Class': 'io.github.longfish801.logipa.Logipa',
		'Class-Path': configurations.runtimeClasspath.collect { it.name }.join(' ') + ' ../conf/'
	)
}

createExe {
	icon = '../../src/launch4j/logipa.ico'
	dontWrapJar = true
	language = 'JAPANESE'
}

// リリース関連のタスクです

task copyExe(type: Copy, dependsOn: [createExe]){
	from "${buildDir}/launch4j"
	into "${buildDir}/${project.name}-${version}"
}

task copyRelease(type: Copy){
	from 'src/release'
	into "${buildDir}/${project.name}-${version}"
}

task release(dependsOn: [fix, copyExe, copyRelease]){
	file("${buildDir}/${project.name}-${version}/log").mkdir()
}
